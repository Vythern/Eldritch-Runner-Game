using Unity.VisualScripting.Antlr3.Runtime.Tree;
using Unity.VisualScripting;
using UnityEngine;
using System.Collections.Generic;

public class Cell : MonoBehaviour
{
    [Header("Tiles")]
    [SerializeField] public GameObject[] floorTiles;
    [SerializeField] public GameObject[] ceilingTiles;

    private float generationBudget = 0f;
    public GameObject leftCell = null;
    public GameObject rightCell = null;

    [SerializeField] private List<GameObject> validTraps = new List<GameObject>();
    [SerializeField] private List<GameObject> validRightCells = new List<GameObject>();
    public int validRightCellCount = 0;

    public enum TrapType
    {
        LeftSpikes,
        RightSpikes,
        DownSpikes,
        UpSpikes,
        Lava,
        Turret,
        SwingingBall,
        SawbladeUp,
        SawbladeDown,
        SawbladeLeft,
        SawbladeRight,
        SawbladeUpLeft,
        SawbladeUpRight,
        SawbladeDownLeft,
        SawbladeDownRight
    }

    //Game manager will generate new cells at runtime.  
    //It needs to know the rightmost active cell at any given time, and reference that cell's list of valid "next cells".  
    public GameObject getRandomValidCell()
    {
        int cellChoice = Random.Range(0, validRightCells.Count);
        return validRightCells[cellChoice];
    }

    void Start()
    {
        validRightCellCount = validRightCells.Count;
        print("Start:  " + validRightCellCount);
        //since cells are generated by the game manager, we do not worry about the start method, and instead rely on the public initializeCell method to be called by the game manager.  
    }

    public void destroyCell()
    {
        if(rightCell != null) 
        {
            this.rightCell.gameObject.GetComponent<Cell>().leftCell = null; //set the left cell of the destroyed cell to null.  
        }
        GameObject.Destroy(this.gameObject);
    }

    private void generateTrapsAndEnemies()
    {
        //generate a random order of integers from 0 to validTraps.count.  eg size of traps = 3, then iterate a random order like 0, 2, 1, or 2, 0, 1.  
        //then, try to buy the traps and enemies in that order using the generation budget, subtracting the cost of that gameobject.getcomponent<trap>().getCost().  
        for(int i = 0; i < validTraps.Count; i++)
        {
            
        }
    }

    public void initializeCell(GameObject left, GameObject right, float budget)
    {
        this.leftCell = left;
        this.rightCell = right;
        this.generationBudget = budget;

        //generate traps in valid positions using budget.  
        generateTrapsAndEnemies();
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}